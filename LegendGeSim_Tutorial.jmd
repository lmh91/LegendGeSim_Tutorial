
# LegendGeSim.jl Tutorial

```julia
using LegendGeSim
using LegendTestData
using LegendGeSim: SolidStateDetectors as SSD
using LegendHDF5IO
using Plots, Measures
using HDF5
using Unitful
gr(size = (1000, 600),
    left_margin = 1cm,
    bottom_margin = 1cm,
    right_margin = 1cm,
    top_margin = 0.1cm,
    grid = 0.5,
    framestyle = :box,
    lw = 2,
    xwiden = false,
    ywiden = true,
    legend = false,
)
```

## Get example configuration files and Geant4 output

We need 3 input files:
1) Detector meta data configuration file
2) Energy depositions hits (e.g. output from G4Simple)
3) LegendGeSim-configuration file

```julia
testdata_path = joinpath(LegendTestData.legend_test_data_path(), "data", "ldsim")
LegendGeSimExampleConfigFolder = joinpath(dirname(dirname(pathof(LegendGeSim))), "examples/configs")

detector_metadata_filename = "invcoax-metadata.json"
geant4_output_hit_filename = "single-invcoax-th228-geant4.csv"
cp(joinpath(testdata_path, detector_metadata_filename), detector_metadata_filename, force = true)
cp(joinpath(testdata_path, geant4_output_hit_filename), geant4_output_hit_filename, force = true)

sim_settings_ssd_filename = "SSD_NoiseSim.json"
sim_settings_siggen_filename = "siggen_NoiseSim.json"
cp(joinpath(LegendGeSimExampleConfigFolder, sim_settings_ssd_filename), sim_settings_ssd_filename, force = true)
cp(joinpath(LegendGeSimExampleConfigFolder, sim_settings_siggen_filename), sim_settings_siggen_filename, force = true);
```

## Legend Detector Metadata Files

https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/

1. https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/detector-metadata_1.pdf
2. https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/detector-metadata_2.pdf
3. https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/detector-metadata_3.pdf
4. https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/detector-metadata_4.pdf
5. https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/detector-metadata_5.pdf
6. https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/detector-metadata_6.pdf
7. https://github.com/legend-exp/legend-metadata/blob/master/hardware/detectors/detector-metadata_7.pdf

## Load the configuration Files

```julia
config = LegendGeSim.load_config(detector_metadata_filename, sim_settings_ssd_filename);
# config = LegendGeSim.load_config(detector_metadata_filename, sim_settings_siggen_filename);
```

```julia
sim = LegendGeSim.simulate_fields(config);
```

```julia
plot(
    plot(sim.detector),
    plot(sim.point_types, full_det = true),
    plot(sim.electric_potential, full_det = true),
    begin
        plot(sim.electric_field, full_det = true)
        SSD.plot_electric_fieldlines!(sim, full_det = true)
    end,
    plot(sim.weighting_potentials[1], full_det = true),
    plot(sim.weighting_potentials[2], full_det = true),
    size = (1000, 1400), layout = (3, 2)
)
```

```julia
C = LegendGeSim.capacitance_matrix(sim)
```

## Simulate Waveforms

### Load the energy depositions hits 

```julia
geant4_output_evt_table = LegendGeSim.read_pet(geant4_output_hit_filename) # could also in the HDF5 Format -> LegendTextIO.jl & LegendHDF5IO.jl
```

```julia
plot(geant4_output_evt_table, size = (1000, 1000))
```

### Preprocessing of the events: `pet` -> `stp` 
In case of SSD: Filters depositions not located inside the detector

```julia
stp_table = LegendGeSim.pet_to_stp(geant4_output_evt_table, sim);
```

### Simulation of charge drifts through the detector and generate signals (waveforms): `stp` -> `pss`
Either via SSD or via Siggen.
These are "perfect" waveforms: No noise.

```julia
pss_table, pss_truth_table = LegendGeSim.stp_to_pss(stp_table, sim, config);
```

```julia
plot(pss_table.waveform[1:10], size = (1000, 600), lw = 2, legend = false)
```

### Generate Data-Like Raw waveforms: `pss` -> `raw`
Add Noise, Electronic Response (from PreAmp), simulate DAQ

```julia
raw_table = LegendGeSim.pss_to_raw(pss_table, pss_truth_table, config)
```

```julia
plot(raw_table.waveform[1:10], size = (1000, 600), lw = 2, legend = false)
```

### Store it to into the LEGEND HDF5 Format:

```julia
h5open("simulated_raw_data_ssd.lh5", "w") do h5f
    LegendHDF5IO.writedata(h5f, "raw", raw_table)
end
h5open("simulated_raw_data_ssd.lh5", "r") do h5f
    display(h5f)
end
```

# Via MJGSigGen.jl

```julia
config_siggen = LegendGeSim.load_config(detector_metadata_filename, sim_settings_siggen_filename);
sim_siggen = LegendGeSim.simulate_fields(config_siggen);
```

### Plotting the fields:
There are conversion functions of the electric potential and weighting potential to the corresponding SSD types.
Thus, we can use the plotting recipes from SSD to also easily plot the fields calculated with FieldGen.

```julia
e_pot = SSD.ElectricPotential(sim_siggen);
w_pot = SSD.WeightingPotential(sim_siggen);
```

```julia
plot(
    plot(e_pot, full_det = true, title = "Epot via FieldGen"),
    plot(w_pot, full_det = true, title = "Wpot via FieldGen"),
    size = (1000, 500), layout = (1, 2)
)
```

## Capacitance via FieldGen:

```julia
C_siggen = LegendGeSim.capacitance_matrix(sim_siggen)
```

```julia
C # Capacitance calculated via SSD (see cells above)
```

```julia
geant4_output_evt_table_siggen = LegendGeSim.read_pet(geant4_output_hit_filename) # could also in the HDF5 Format -> LegendTextIO.jl & LegendHDF5IO.jl
stp_table_siggen = LegendGeSim.pet_to_stp(geant4_output_evt_table_siggen, sim_siggen);
pss_table_siggen, pss_truth_table_siggen = LegendGeSim.stp_to_pss(stp_table_siggen, sim_siggen, config_siggen);
raw_table_siggen = LegendGeSim.pss_to_raw(pss_table_siggen, pss_truth_table_siggen, config_siggen)
```

```julia
ievt = 1
plot(raw_table.waveform[ievt], size = (1000, 600), lw = 2, label = "SSD", legend = :topleft)
plot!(raw_table_siggen.waveform[ievt], size = (1000, 600), lw = 2, label = "SigGen")
# plot!(xlims = (32500, 35000))
```

```julia
```
